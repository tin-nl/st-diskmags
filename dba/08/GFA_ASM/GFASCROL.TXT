A SCROLL IN G.F.A.

 SSSSSSSS  CCCCCCC RRRRRRR   OOOOOO  LL    LL     SSSSSSS         !
SS        CC       RR    RR OO    OO LL    LL    SS             !!!
 SSSSSSS  CC       RRRRRRR  OO    OO LL    LL     SSSSSS        !! 
       SS CC       RR   RR  OO    OO LL    LL           SS       
SSSSSSSS   CCCCCCC RR    RR  OOOOOO   LLLL  LLLL SSSSSSSS        !!
                                                             
A scroll in G.F.A.

The last time I wrote something for this corner I had written 
something called DEMO (or something like that)
If you saw the compiled version you could see a nice screen 
with a nice scroll and some nice dots and rasters.

But here comes the problem: if you saw the G.f.a. source you
could only see some dot's and rasters. 
The reason for this is that for the scroll I had used a routine 
which we will explain another time in a near future. 
(If you are lucky it will still be in the same dimension)


So I felt a bit guilty, coz the program looked so promissing,
and the source was so disgusting that I have wrote some other
scroll routine's for you. 
They are a bit easier to understand than the routine we use for
our scrolls, but with this source you can also produce nice 
things, and it is also rather fast for a scroll in G.f.a.

################################################################
######################## THE PROGRAM ###########################
################################################################

' EXAMPLE HOW TO DO A SCROLL-TEXT IN G.F.A.
' THE SIMPLE WAY, AND NOT THE BEST, BUT YOU MUST START SOMEWHERE.
'
' O.T.M. OF THE D.B.A. 30/12/1992
'
ON BREAK GOSUB einde                                ! STANDARD PROCEDURE FOR M
E
ON ERROR GOSUB einde
RESERVE 200000                          ! RESERVE SOME WORKSPACE.
DIM font$(255),fontbuf%(32066 DIV 4)     ! BUFFER FOR FONT AND SOME CHARACTERS
start%=(V:fontbuf%(0)+255) AND &HFFFFFF00! CALCULATE STARTADRES FOR FONTBUFFER
rez%=XBIOS(4)                           ! CHECK REZ
IF rez%=2 THEN                          ! IF HIGH RES
  CLS                                   ! (NO COLOUR MONITOR)
  PRINT "SORRY, ONLY FOR LOW-RES"
  einde
ELSE IF rez%<>0
  ' ELSE CHANGE TO LOW RES
  VOID XBIOS(5,L:-1,L:-1,0)             ! CHANGE TO LOW REZ
  VSYNC                                 ! WAIT TILL MON/TV IS READY
ENDIF
BLOAD "E:\DEGAS\FONTS\FONT_3.PI1",start%! LOAD THE FONT INTO THE BUFFER
color_zero
get_font
main
PROCEDURE color_zero
  FOR i%=0 TO 15                ! ALL COLOURS "OUT"
    SETCOLOR i%,0
  NEXT i%
RETURN
PROCEDURE get_font
  BMOVE start%+34,XBIOS(3),32000        ! GET FONT ON SCREEN
  count%=65                             ! THE FONT STARTS WITH A
  '                               AND 65 IS THE ASCII VALUE FOR A
  FOR y%=0 TO 96 STEP 33
    FOR x%=0 TO 288 STEP 33             !GET ONLY THE 30 BY 30 PARTS
      GET x%,y%,x%+30,y%+30,font$(count%)
      INC count%                        ! A,B,C,D,E,F,G,.....
    NEXT x%
  NEXT y%
  CLS
  GET 0,0,30,30,font$(32)                 ! GET THE SPACE " "
  VOID XBIOS(6,L:start%+2)        ! INIT COLOURS
RETURN
PROCEDURE main
  text$=" I HOPE YOU UNDERSTAND HOW THE PROGRAM WORKS SO YOU CAN DO SOMETHING 
SERIOUS AGAIN "
  DO
    FOR i%=0 TO LEN(text$)              ! GO AS LONG AS THE TEXT IS
      IF INP?(2) THEN                   ! IF A KEY IS PRESSED
        einde                           ! GOODBYE
      ENDIF
      x$=MID$(text$,i%,1)               ! GET ONE (1) CHARACTER OUT OF THE TEX
T
      PUT 0,100,rest$                   ! PUT REST OF SCROLL ON SCREEN
      PUT 319-32,100,font$(ASC(x$))     ! PUT WANTED CHARACTER ON SCREEN
      GET 32,100,319,100+32,rest$       ! AND GET THE NEXT BIT
      PAUSE 5                           ! WAIT A BIT(CH)
    NEXT i%
  LOOP
RETURN
PROCEDURE einde
  VOID XBIOS(5,L:-1,L:-1,rez%)          ! ALWAYS CHANGE BACK TO OLD REZ
  VSYNC                                 ! WAIT
  CLS                                   ! AND CLEAN UP THE MESS
  RESERVE                               ! GIVE MEM BACK
  SETCOLOR 0,1911                       ! MAKE SURE WE CAN SEE WHAT WE READ
  SETCOLOR 15,0
  EDIT                                  ! AND EXIT
RETURN


################################################################
################################################################
################################################################

What do we need?

The first thing we need is a nice font, coz else it is not worth
coding for. Graphix are very important, You can code a very good
demo, but if the graphix are bad, the demo will never be a good
succes.

Then we need some memory for the font to fit in.
To do this I have DIMmensioned a piece of memorie, and I have
calculated the starting address of the piece.

What then?

Then we must get the font, and assign the small pieces to values
so we can use them later.
To do so I have DIMmensioned font$ and gave it enough room for
255 characters, coz the standard character set is not larger.

And then?

All the preparing work is done now, so you can create a scroll 
routine.
First we must have a text. In this case: Text$="blablabla bla!"
Then we must have a main loop where we can put the routine in.

The Scroll routine:

We get a character out of the text$. (MID$(etc.))
we find out which character is is and put it on the 
screen (PUT etc.)

We keep doing this until a key is pressed.

I hope I have helped you a bit with this program, 

HAVE A GOOD LIVE, AND CODE UNTIL YOU DROP (FROM SLEEP OR 
SOMETHING LIKE THAT)


O.T.M. of the D.B.A.


