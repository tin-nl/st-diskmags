MAKE YOUR OWN .TTP



                Programming your own command-line based programs
                ------------------------------------------------

                              Article by: MUG U.K¿
                              --------------------


This article will cover all the necessary routines (which number a few)
and procedures required for you to design and program your own .TTP files
and it will compliment last issues' article on calling .TTP files.

Command-line programs are especially suited for the times when a quick and
easy routine is best instead of a long-drawn out GEM-based routine which
probably has all the un-necessary hassles that GEM-programming comes with.

Most of my utilties are GEM-based because they are for use by everyone.  But
they usually start out as a quick-fix program for one particluar situation
and then a fully-fledged and (hopefully) idiot-proof version is written.

This article will show you how easy it is to program a .TTP file, all you
have to do is show some inspiration and adapt the routines for your own
use.


The example .TTP file - File Splitter
-------------------------------------

The program I have written as an example may be of some use to all those
people who do packed versions of programs.  It is a file-splitter.

'A what ?' I hear you ask !!  A file-splitter is a handy tool for chopping
up a file into two sections.  An example would be where a demo loads in the
palette and resolution of a Degas .PI1 file first (34 bytes), and then loads
in the picture data (32000 bytes).  If you pack the picture data only, a
standard TRAP #1 loader will recognise the packed data and depack it,
although the resolution and palette will be unpacked.  Confused ?

Try this explanation instead:

OPEN "U",#1,"PICTURE.PI1"
BGET #1,resolution%,2
BGET #1,palette%,32
BGET #1,picture_data%,32000
CLOSE #1

All of the above BGET are compiled into GEMDOS $3f (f_read) commands.  A
TRAP #1 loader will intercept all the above BGET commands and expect to
find 2 bytes, followed by 32 bytes, followed by a massive 32000 bytes of
data.  But if we split the picture into 2 seperate sections, with the
resolution and palette data in one half and the picture data in another,
we can pack the picture data and then re-join the files and everything
will be OK !!

Why ?  Because the TRAP #1 loader will load in the resolution and the
palette (they will not be packed) and they will be at their normal positions
within the picture file (resolution = +0 / palette = +2) but the picture
data will be packed and therefore the depacker will unpack this data to its
proper size of 32000 bytes !!  The only other way around this is to chunk-pack
the whole file, which in turn needs a larger TRAP #1 loader and a lot
slower loading time.

Anyway, if you don't follow the above, I'm sure you will find a use for my
file-splitter, which the GFA BASIC source follows on from here (it is also
on the disk as well !):

------------------------------------------------------------------------------

' ******************************************
' *   Split Program v1.0  -  by MUG U.K¿   *
' *   ----------------------------------   *
' *                                        *
' *      Needs compiling as a .TTP !!      *
' *                                        *
' * Parameters are:  filename split-offset *
' *                                        *
' * eg:  inputfile 10000                   *
' * (before 10000 & after 10000 are saved  *
' * as seperate files)                     *
' ******************************************
'
CLS
PRINT "Split File v1.0 by MUG U.K¿ - 6/2/1993"
PRINT "--------------------------------------"
PRINT
length%=PEEK(BASEPAGE+128)
IF length%=0                            ! Check for no input !!
  PRINT CHR$(7);"ERROR: No command line entered"
  PRINT
  PRINT "Format: input_file split_offset"
  PRINT
  PRINT "Eg.     picture.pi1 34"
  PRINT
  PRINT "The above example splits a Degas"
  PRINT "picture into the header word and"
  PRINT "palette data in one file and the"
  PRINT "graphics data in the other file"
  PRINT
  PRINT "Press any key to exit"
  GOTO exit
ELSE
  len_base|=PEEK(BASEPAGE+128)          ! length of command-string
  arg$=CHAR{BASEPAGE+129}               ! contents of command string
ENDIF
'
' PRINT "Command Line length: ";len_base|  ! This are REMmed out on purpose
' PRINT                                    ! Use them during the bug-testing
' PRINT arg$                               ! stage of your program
' PRINT
'
'
' We now split 'arg$' into two sections.  Before the space and after
' giving us the filename and the split-offset
'
pointer|=INSTR(arg$," ")              ! Get input file
input_file$=MID$(arg$,1,pointer|)
INC pointer|
'
byte$=MID$(arg$,pointer|,LEN(arg$))   ! Get split point
bytes%=VAL(byte$)
'
PRINT
PRINT "Splitting:  ";input_file$      ! Display input data
PRINT "At offset:  ";bytes%
PRINT "OK (Yes/No) "                  ! Sure to carry on ??
'
KEYTEST key|
'
IF key|<>ASC("Y") AND key<>ASC("y")
  GOTO exit
ENDIF
'
IF NOT EXIST(input_file$)             ! Check file exists
  PRINT
  PRINT CHR$(7);"ERROR - Input file does not exist !!"
  GOTO exit
ENDIF
'
split(input_file$,bytes%)                   ! Split the file
PRINT CHR$(7);"All done - any key to exit"  ! and exit
'
exit:
VOID INP(2)
EDIT
'
' ********************************************************************
' * Split file into two files at offset specified - ½ MUG U.K¿, 1993 *
' ********************************************************************
'
PROCEDURE split(in$,split%)
  OPEN "U",#1,in$
  len%=LOF(#1)
  DIM in%(len% DIV 4)
  BGET #1,V:in%(0),len%
  CLOSE #1
  '
  PRINT "Saving 1st half from 0 to ";bytes%
  OPEN "O",#1,"SPLIT_1.DAT"
  BPUT #1,V:in%(0),bytes%
  CLOSE #1
  '
  PRINT "Saving 2nd half from ";bytes%+1;" to ";len%
  OPEN "O",#1,"SPLIT_2.DAT"
  BPUT #1,V:in%(0)+bytes%,len%-bytes%
  CLOSE #1
RETURN

------------------------------------------------------------------------------

As usual, I've put in loads of comments for you to follow my messy (but it
gets the job done!) code and there are plenty of room for improvements !!
Such as ....

1) Writing a similar program that joins the files back together, the
   code is 50% there, all you have to do is write the 'join' procedure
   I'll release my own version on the next DBA Magazine !!

2) Allowing selection of proper output paths and files.

   Eg. picture.pi1 34 e:\packed\temp\picture
   
   would split the file 'PICTURE.PI1' as before, but the two halves of the
   files would be sent to the folder specified and under the filenames
   PICTURE.1 and PICTURE.2 !!

3) Improve the routine to split the command-line !!  At the moment, it
   searches for a space and decides that what is before the space is the
   filename and after the space is the split-offset.  What if you enter
   
   picture.pi1 balls

   The program quits with a GFA error because the input-data is not an
   integer - so add some error checking etc.

4) Add more error-checking.  Making sure that the length of the file
   will allow the split-offset sent.  What if a file is only 20000 bytes
   long and the split-offset is 30000 bytes ??


Happy programming !!


The end ....
------------

So there you have it.  Another GFA article for the DBA Magazine by MUG U.K¿
and I hope to do some more.  I will definitely be buying a 4 Meg Falcon
when they officially come out in the UK in April 1993 (hopefully!) with
the case-changes etc.  So I will therefore be using the new version of
GFA BASIC (v3.7) which has Multi-TOS compatibility and then I shall have
some fun, because I will be know as much about the Falcon as I do about 
programming the CRAY XMP-1 !!


Contacting MUG U.K¿
-------------------

Please write to me with any of your GFA queries.  I apologise now for any
delay in my reply, but I am doing a HND in Computers and my assignments
must come before any personal stuff !!  So, here is where you can
write to:

"Anncott"
Hylas Lane
Rhuddlan
Clwyd
LL18 5AG
Wales
United Kingdom

or if you have a modem:

System ST BBS (Sysop Mark Matts)

+44 (0)533 413443       - 1200/2400/9600 mnps

alternatively, modem contact can be made via the following two nodes:

FidoNET 2:255/320       or      NeST 90:102/131

I have no idea what the above means as I am not a modem owner, but the
System ST BBS is the official support BBS for any of my Public Domain
programs (you can find them all there!).  All messages will be passed
onto me by the Sysop and I will answer them as quickly as I can.

And, just recently, my college was connected to the rest of the world via
the JANET/INTERNET network.  So you contact me through the following
'email' address:

MSCHND128@NEWI.AC.UK  - whatever this means !!

Can I please have some response through JANET/INTERNET as I would like to 
use this form of mailing a lot !!

My interests are GFA programming (mainly utilities), learning 68000 and
writing routines in 68000 for GFA, swapping the latest demos and other Public
Domain stuff.  I was a member of The Source Demo CD group, but you can
read their Obituary Column somewhere else in this issue !!  Also if you
are doing a HND in Computing and want to swap routines/assignment help then
please do - I am currently doing some weird PASCAL/COBOL crap !!

I think that is all for now.  See you all - until the next GFA article
I write for the DBA Magazine !!


MUG U.K¿ - 6/2/1993

