CYBERPUNK STOS
NN    NN  EEEEEEE  TTTTTTTT  WW     WW   OOOOOO   RRRRRR   KK   KK 
NNN   NN  EE          TT     WW     WW  OO    OO  RR   RR  KK  KK 
NNNN  NN  EE          TT     WW     WW  OO    OO  RR   RR  KK KK  
NN NN NN  EEEEEE      TT     WW  W  WW  OO    OO  RRRRRR   KKKK   
NN  NNNN  EE          TT     WW W W WW  OO    OO  RR RR    KK KK  
NN   NNN  EE          TT     WWW   WWW  OO    OO  RR  RR   KK  KK 
NN    NN  EEEEEEE     TT     WW     WW   OOOOOO   RR   RR  KK   KK

The Cyberpunk's STOS lesson part 1               Public Domain 1991


                                HISTORY


The Ecto 1 of D.B.A. asked me to write articles about STOS, but i have
no time to make new routines at this moment as i have started working
and i am in the middle of a game (this time it will even be finished
as i programm it myself, those MC guys never finishes what they start)

So instead i will start with a couple of my old routines, starting with
the Unlimited BOB intro from the Modules disk. 

The history of this intro started in october 1990 while i finished the
S-EXTENSION demo (The problem and the fun with writing satire is that
some people take it for real like ST-FORMAT did) as i had planed to do
a game after that demo i started to explore the world of moving objects
also known as Sprites or BOB's (AMIGA). 

After a day i tossed the sprite commands into the bin and wrote my own
Screen$ routines, the first thing i made was a unlimited bob's routine
that i planed to use as an intro to one of the demos. But in the end i
thought 'This is to stupid, the MC programmers is going to laugh them-
selves to death' and as i am a rather nice chap i didn't want them to die
so young, so i dropped the entire idea.

A month later i received this mega demo from a rather famous coder
group (no names mentioned) an there it was, a bob started to move around
the screen filling it completely, one hour later on the intensive care
at the hospital for laugh problems i woke up thinking 'what a bunch of
lamers, using a routine i didn't find good enough for a basic demo.'

But this routine started to turn is ugly head up all over the place, so
in the end i screamed 'Ohhhh what the F**k i'll give up' (or as i really
screamed it in Frensk (a norwegian language) 'èèèèèèèè faen heller i jer
opp') and consequently sat down and made this intro.


                                LESSON 1

On this disk you will find a prog called 'BOBY.BAS' this is the entire
BOB routine with graphics and music included. 

Bellow you will find the main part of the routine with text to explain 
what the following code does.     
    
Dictionary:

                               Preshift

preshift is to shift the bobs before you starts the routine, this means
that you have 16 bobs (or less) that looks the same but are shifted to
the right (or left)

Lamer explanation: if you put image 1 of a bob to a location and then
wants to move it one point to right, then instead of shifting the bytes
to move it you just change to image 2 which you have already moved to the
right. This means that the bobs only moves from 0 to 16 to 32 etc.. all
the inbetween movement is done by changing image. 


                            Screen animation 

Screen animation is the trick behind this bob routine it means that you
have several screens in the memory and that you changes screens to make
it look like something moves.               


- Sets the start speed to 1, balls to mode 5 and reserves the 6 screens

10 SPEED=1 : BALLS=5
20 reserve as screen 6
30 reserve as screen 7
40 reserve as screen 8
50 reserve as screen 9
60 reserve as screen 10
70 reserve as screen 11

- Standard startup sequence: The gosub in line 80 goes to the intro
  sequence. The dim is for the bob's  
 
75 get palette (15)
80 gosub 1000
110 mode 0 : key off : flash off : get palette (15) : hide : curs off 
: ink 0
120 dim S$(128)

- This loop preshifts the 8 bobs into 128, look at that, a bug? the
  for x should be 0 to 15 (i think) but what the F**k it works! 

130 logic=back : cls back
140 def scroll 1,0,0 to 48,16,1,0
150 for I=0 to 7
160 screen copy 15,I*16,0,I*16+16,16 to back,16,0
170 for X=0 to 16
180 S$(X+I*16)=screen$(back,16,0 to 48,16)
190 scroll 1
200 next X
210 cls back
220 next I

- Copies the  strange logo to the 6 screens (6 to 11), limits the
  mouse to avoid illegal values and starts the music stored in bank
  12

230 screen copy 15 to back : bar 0,0 to 199,199
240 for I=6 to 11 : screen copy back to I : next I : logic=6
250 limit mouse 0,0 to 183,183
260 x mouse=0 : y mouse=0 : SE=0
265 dreg(0)=1 : call start(12)

- So here it starts, the main loop! the poke changes bg colour to black
  see the lbv in line 587. line 280 gets the key press and turns the chr
  into a upper chr. line 290 quits if chr= space

270 rem-------------------- LOOP STARTS HERE -----------------------
275 poke $FF8240,$0
280 IN$=upper$(inkey$)
290 if IN$=" " then call start(12)+2 : stop 

- checks the mouse : if mouse key = 1 then change to another bob if the 
  mouse key = 2 then clear screens: The strange setup 300-310 is to avoid
  that the bobs changes to fast when you press the mouse key (remember
  this shit updates 50 or 60 times a sec!) this routine makes sure that
  you only changes the bob ones when you press the button.

300 if mouse key=0 then TEST=0
310 if TEST=1 then goto 340
320 if mouse key=1 then dec E : TEST=1 : if E<0 then E=7
330 if mouse key=2 then TEST=1 : clear key : for I=6 to 11 : screen
copy back to I : next I : wait vbl goto 270

- 340 Checks the mouse, 341 calculates the preshift 342-344 calculates
  the bob positions opposite of the mouse cords  

340 X=x mouse : Y=y mouse
341 C=Y/16 : C=Y-C*16
342 D=(183-Y)/16 : D=183-Y-D*16
343 G=(183-X)/16 : G=183-X-G*16
344 F=X/16 : F=X-F*16

- Draws the bobs, BALLS in line 350 decides how many bobs to be drawn
  (important: I uses screen$ and not the slow sprite commands)

350 on BALLS goto 480,470,460,430,370
370 screen$(logic,X,183-Y)=S$(F+E*16)
380 screen$(logic,Y,X)=S$(C+E*16)
400 screen$(logic,183-Y,183-X)=S$(D+E*16)
410 screen$(logic,183-X,Y)=S$(G+E*16)
430 screen$(logic,183-Y,X)=S$(D+E*16)
440 screen$(logic,Y,183-X)=S$(C+E*16)
460 screen$(logic,183-X,183-Y)=S$(G+E*16)
470 screen$(logic,X,Y)=S$(F+E*16)

- decides if you should use 1 or 6 screens

480 if IN$="S" and SE=0 then SE=1 : goto 600
490 if IN$="S" and SE=1 then SE=0 : for I=6 to 11 : screen copy back to
 I : next I : wait vbl : clear key 

- Checks the keyboard and changes values, the pokes are 50/60hz, the LBV
  is a speed test (to make it more accurate put it right before and after
  a wbl)
 
500 if IN$="1" then SPEED=1
510 if IN$="2" then SPEED=2
520 if IN$="3" then SPEED=3
530 if IN$="4" then SPEED=4
532 if IN$="5" then poke $FF820A,%10
534 if IN$="6" then poke $FF820A,%0
540 if IN$="Q" then BALLS=1
550 if IN$="W" then BALLS=2
560 if IN$="E" then BALLS=3
570 if IN$="R" then BALLS=4
580 if IN$="T" then BALLS=5
585 if IN$="V" then LBV=1
586 if IN$="C" then LBV=0
587 if LBV=1 then poke $FF8240,$777

- Slows down the intro if speed is grater than 1

590 if SPEED>1 then for I=1 to SPEED : wait vbl : next I

- one screen routine 

600 if SE=1 then physic=6 : logic=6 : wait vbl : goto 270

- six screen routine 

610 if SC=0 then physic=6 : logic=7 : SC=1 : wait vbl : goto 270
620 if SC=1 then physic=7 : logic=8 : SC=2 : wait vbl : goto 270
630 if SC=2 then physic=8 : logic=9 : SC=3 : wait vbl : goto 270
640 if SC=3 then physic=9 : logic=10 : SC=4 : wait vbl : goto 270
650 if SC=4 then physic=10 : logic=11 : SC=5 : wait vbl : goto 270
660 if SC=5 then physic=11 : logic=6 : SC=0 : wait vbl : goto 270


- The lines 1000 to 1520 is just the intro sequence. Not important here
  as there are no nice tricks in it. If you wants to see it then check
  out the BOBY.BAS file on the disk.
 


