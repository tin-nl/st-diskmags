RASTER COLORS 
                           Raster colors for beginners
                           a simple routine in assembler
                           =============================

This text is aimed at the beginning assembler programmers, it provides a simple
way to create more than 16 colors at once on your ST (or STE) screen.

The way to do this is to switch the palette value at a certain time. The best
time to change colors is in the Horizontal BLanking period of the screen. This
is the (very) small space where the electron beam of your monitor is going back
to write a new line, this is called 'the retrace' The visible part of the line
is written from left to right, the retrace is from right to left, during retrace
the electron beam is switched off so it's not visible, it draws a blank line
that's why it's called the Horizontal BLanking period. When we switch the
palette value of a color in this time, the next line will be drawn with the new
palette value. Luckily the ST provides us with an easy mechanism to do just this
It can generate an interrupt on every retrace. When we put in a small program in
this interrupt which switches the palette value, we have solved the problem....
Note, the program which is listed below is certainly not the best way to do
this, but it gives just a hint how the trick is done. It's even possible to
change all palette values, so you have 16 new colors on the next line !

Ok, try this one out. Change it and see what happens...


; *************************************************************************
; ******************** Assembler program source ***************************
; *************************************************************************


; -------------------------------------------------------------------------
;  raster color routine runs safely on the ST, STE and MEGA STE    by KGE
; -------------------------------------------------------------------------
;
;  call this routine with D0=1 to switch on raster colors
;                         D0=0 to switch off
;                         D1=color number to use with raster
start:
                CMP.W   #0,D0           ; switch off ?
                BEQ.S   skip_p          ; no
                LEA     test(PC),A0     ; test if already switched on
                CMPI.W  #1,(A0)         ; if its not zero dus...
                BEQ.S   skip_start      ; if already on just skip this zooi
                MOVE.L  #$00FF8240,D0   ; first pallette register
                AND.L   #15,D1          ; this one is for those who think they
;                                         have more than 16 palette registers
                MULU    #2,D1           ; calculate offset
                ADD.L   D1,D0           ; and add together
                LEA     REG_AD1+2(PC),A0 ; self modifying code 1
                MOVE.L  D0,(A0)
                LEA     REG_AD2+2(PC),A0 ; 2
                MOVE.L  D0,(A0)
                LEA     REG_AD3+2(PC),A0 ; and 3
                MOVE.L  D0,(A0)
                PEA     do_muc_on(PC)   ; execute muc_on
                BRA.S   multicol
skip_p:         LEA     test(PC),A0     ; test if already switched off
                CMPI.W  #0,(A0)         ; it was off !!!!!
                BEQ.S   skip_start      ; so just skip this
                PEA     do_muc_off(PC)  ; else execute muc_off
multicol:       MOVE.W  #$0026,-(SP)    ; Supexec
                TRAP    #14
                ADDQ.L  #6,SP

skip_start:     RTS                     ; and back to Basic

do_muc_on:
                LEA     MFPREG(PC),A0
                MOVE.B  $00FFFA07,(A0)+
                MOVE.B  $00FFFA13,(A0)+
                MOVE.B  $00FFFA1B,(A0)+
                MOVE.B  $00FFFA21,(A0)+

REG_AD3:        MOVE.W  $00FF8240,(A0)  ; save this one

                LEA     VBJ+2(PC),A0
                MOVE.L  $00000070,(A0)
                LEA     VB(PC),A0
                MOVE.L  A0,$00000070

                LEA     SYNJ+2(PC),A0
                MOVE.L  $00000118,(A0)
                LEA     SYN(PC),A0
                MOVE.L  A0,$00000118

                BCLR    #0,$00FFFA07
                LEA     HB(PC),A0
                MOVE.L  A0,$00000120

                BSET    #0,$00FFFA07
                BSET    #0,$00FFFA13
                LEA     test(PC),A0     ; set test flag
                MOVE.W  #1,(A0)
                RTS

do_muc_off:
                CLR.B   $00FFFA1B       ; stop timer first
                MOVE.L  VBJ+2(PC),$00000070
                MOVE.L  SYNJ+2(PC),$00000118

                LEA     MFPREG(PC),A0
                MOVE.B  (A0)+,$00FFFA07
                MOVE.B  (A0)+,$00FFFA13
                MOVE.B  (A0)+,$00FFFA1B
                MOVE.B  (A0)+,$00FFFA21
REG_AD2:        MOVE.W  (A0),$00FF8240
                LEA     test(PC),A0
                MOVE.W  #0,(A0)         ; reset test flag
                RTS

MFPREG:         DS.B 8          ; buffer space

VB:             CLR.B   $00FFFA1B       ; timer B control register
                MOVE.B  #1,$00FFFA21    ; timer B data register
                MOVE.L  $0000040C,$00000410 ; reset color pointer
                MOVE.B  #8,$00FFFA1B    ; restart timer B

                OPT O-
VBJ:            JMP     $FFFFFFFF       ; self modifying code ...
                OPT O+

HB:             MOVEM.L A0,-(SP)        ; save A0
                MOVEA.L $00000410,A0    ; get current color pointer
REG_AD1:        MOVE.W  (A0)+,$00FF8240 ; move it to palette register 0
                MOVE.L  A0,$00000410    ; save incremented pointer
                MOVEA.L (SP)+,A0        ; and get back A0
                BCLR    #0,$00FFFA0F    ; clear interrupt flag
                RTE

SYN:            MOVE    #$2500,SR
SYNJ:           JMP     $00AAAAAA

test:           DS.W 1

                END

; *****************************************************************************
; ************************** end of assembler source **************************
; *****************************************************************************


The program written below is intended to be used from within GFA Basic,
although it's also possible to use it from within Omikron or any other
language. The main thing to remember is that Data registers are used to pass on
the information as: switching on and off the raster colors and to tell the
routine which palette register to use.
Do not forget to load the routine into the INLINE space (that is the line with
the 'INLINE code%,1000'

So, in GFA Basic the way to call this routine is:


' =========================================================================
' ======================= start of basic program ==========================
' =========================================================================
INLINE code%,1000
INLINE table%,512
'
'
DIM reg%(16)   ! arrange an array for the data and adres registers
'
' first we calculate a 'nice' color table
'
v%=0                 ! start value for palette
va%=&H111            ! increment value
for t%=0 to 511 step 2          ! fill complete table
   dpoke table%+t%,v%           ! store value in table
   add v%,va%                   ! add increment factor
   if v%=&H777 or v%=&H000      ! max or min intensity ?
      va%=-va%                  ! reverse increment value
   endif
next t%
'
' test if rasters work ok
'
slpoke 1036,table%            ! table pointer
slpoke 1040,table%            ! reset value for table pointer
'
reg%(0)=1                     ! switch rasters on value in D0
reg%(1)=0                     ! select background palette register
RCALL code%,reg%()
'
~inp(2)                       ! wait for key
'
reg%(0)=0
RCALL code%,reg%()            ! switch rasters off value in D0
'
END
' =========================================================================
' ====================== end of basic program =============================
' =========================================================================


