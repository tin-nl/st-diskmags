 
====================================================================== 
feature

                   Getting Into The Games Industry

                                                               pink/rg 
======================================================================

August 1998.  MrPink  has  finished  university,  although  university 
hasn't quite finished with him.  They  want  him  to go back and resit 
some modules -  but  they  are  missing  the  point.  He  didn't go to 
university to study. He went to university as it bought him free time. 
Free time to code and improve his  coding skills. During the six years 
he spent in  Liverpool  the  time  split  between  university work and 
Falcon coding was heavily biased towards the Atari. It was probably an 
80:20 split - and that's overestimating university work.

Three months after leaving,  MrPink  is  still  happily  coding on the 
falcon. His only income comes  through unemployment benefit. But there 
is a problem. The  department  of  social  security  think he has been 
claiming the dole for too long and it is time for him to get a job. If 
he's not going to make the effort to  find one, they will find one for 
him - no matter how shit it is.

Being a workshy fop, MrPink has managed to spend his entire life up to 
this point without having a job  of  any  sort.  He has never done any 
part time work - no  paper  rounds,  no  bar  work, no time working in 
burger joints or stacking shelves  in  supermarkets.  His free time is 
too important to him. But when the  man starts trying to force bobbins 
jobs on him, he knows he has to make a move.

Like most people I never really had  a  career mapped out. Even when I 
left university I didn't know what  I  wanted  to  do. I had vague and 
unrealistic notions of journalism - perhaps  writing for a small music 
magazine somewhere. But in reality my  skillset lay elsewhere. I would 
dream about working for a games company  -  but I was pretty sure this 
 would only ever be a dream. I  didn't think my coding ability was good 
enough for a games company to employ me.

But I was between a rock and a  hard place. I could either take one of 
the soul destroying jobs the department of social security was pushing 
at me, or I could try and get a journalism job - which realistically I 
wasn't qualified for and was very  unlikely  to get. I decided to give 
the games industry a shot - at this point I had nothing to lose.

I spoke to a few friends 'in the industry' and they advised me to send 
my CV off to an agency.  I  spent  a day constructing a games industry 
biased CV, e-mailed it off to  an  agency  and waited. I wasn't really 
expecting much response.

Two weeks later the agency  got  back  in  touch. They already had two 
companies interested. One of these  was Grolier Interactive, an Oxford 
based company who needed someone to  write  the  AI for their RPG. The 
other was Banbury based Silicon  Dreams  who  were looking for trainee 
playstation programmers.

Soon after this, two more  companies  announced  their interest in me. 
Gateshead based Reflections - creators of Shadow Of The Beast and more 
recently Driver - and  most  exciting  of  all  ATD, the people behind 
Jaguar games 'Cybermorph' and 'Battlemorph'.

Considering I was someone  with  no  games  industry experience, no PC 
programming experience and no degree,  I  was  taken  aback by all the 
attention.

Pretty soon after my first round of interviews, Silicon Dreams offered 
me a job. I was dead excited.  I  liked the technical director who had 
interviewed me, I liked the position and I liked the money. I accepted 
immediately.

I've since moved on - once you are in the industry, it is very easy to 
get jobs elsewhere. It is breaking  in  that is the difficult bit, and 
here I hope to provide a few tips for breaking into the industry.
 
1. THE CV

The CV is the key to the door  of  the industry. A good CV will unlock 
many interview possibilities, a bad CV will end in the bin in a matter 
of seconds. So what are employers looking for on a CV?

For programmers, maths is important  and  most  employers expect an A- 
Level maths pass at grade E or higher. A good number of GCSE passes is 
also expected. If you want to work  on a specialist area like physics, 
then A-levels and degrees are also looked at.

For most employers,  academic  qualifications  are  only  of secondary 
consideration. As the technical director  of the largest games company 
in the UK told me  "I  would  employ  someone  with self taught coding 
skills and no qualifications, but I  would be very reluctant to employ 
someone with good qualifications but no self taught coding skills."

For such a skilled  industry  you  will  meet  a  surprising number of 
people who hold few academic  qualifications. Games programming is not 
something that can be taught  in  university lectures. It is something 
that is learned at home with a lot of motivation.

Your CV should  detail  all  your  qualifications,  but  take  time to 
outline all the projects you have worked  at home - all your demos and 
games. List  what  languages  you  are  familiar  with  and  also what 
techniques you are familiar with - be it 3D coding or sound engines.

If you have no PC  programming  experience  don't  let that worry you. 
Console programming is far  more  interesting  than PC programming and 
there are  a  lot  more  console  programming  opportunities  than  PC 
programming jobs. The PC games market  is  dying, even the PSX - which 
is looking very  long  in  the  tooth  compared  to  modern  PCs  - is 
outselling the PC roughly 8:1 on most titles.

PC programming skills ( DirectX, OpenGL, Glide, C++, MFC etc. ) or not 
directly transferrable to  consoles  -  not  even  the DreamCast. Even 
 though the Sega console has Windows CE, it adds such a performance hit 
it is not worth considering.  I  would  say that PC programming skills 
are a handicap when it comes to console program, because it encourages 
a methodology and style of programming  that  is not suited to getting 
the best out of a single fixed platform.

If you are a programmer you are  expected to be intelligent,  so try to 
avoid spelling and grammatical mistakes on your CV.  Also avoid lots of 
banal information such as  "I  like  listening  to  music" or "I  enjoy 
watching TV".  Information like this  is  unnecessary  and may make you 
look stupid.  Listing all your  extra  curricular  activities is also a 
waste of time.   No-one  cares  if  you  enjoy  rock climbing, ballroom 
dancing or help disadvantaged people  in  your  spare time.  You may be 
trying to show what a  rounded  balanced  individual you are, but let's 
face it,  most coders are pretty sad.  The  more time you have spent in 
front of a computer, the more skills you may have learnt.

Don't bullshit on your CV. If you say you know something or claim that 
you have experience in  an  area,  expect  to  be  asked about in your
interviews. And if you can't answer, not only will you look a fool but 
also the rest of your CV will be called into doubt.

I listed all the  processors  I  was  familiar  with  on  my CV and in 
interviews I was asked to writing short routines in assembly for these 
processors. I was  also  asked  to  describe  the  architecture  of my 
emulators and how the sprite routines worked. I had mentioned about my 
texture mapping routines and I  had  to  describe  how these worked in 
painstaking detail right  down  to  the  inner  loop  of  the scanline 
renderer. So be prepared to back up  anything  you put down on your CV 
with facts.

So what are the most important skills to have on your CV?

The majority of  the  games  written  today  are  3D  games  so  it is 
essential to have 3D  skills.  This  doesn't  mean  that  you need the 
ability to write an entire 3D engine  by hand (although if you do have 
this skill you are virtually guaranteed a job) but you should know the 
 basics of  3D  maths  -  matrix  multiplication,  cross  products, dot 
products,  sorting  algorithms,  basic   lighting  routines,  backface 
culling. If you are starting off in  the industry you will probably be 
working with someone else's  3D  engine,  you  just  need  to know the 
principals behind it.

Assembly coding has suddenly  become  an  essential  skill once again. 
This is great for atari coders,  as  most of them know assembly better 
than any high level language. It has  been a strange and twisting road 
for assembly.

Back in the 8-bit days, nearly  all  games were coded in assembly. The 
majority of the  games  on  16bit  machines  such  as  the  ST, Amiga, 
Megadrive and especially  the  SNES  (which  was  sort  of  8bit) were 
written in assembly. But the  majority  of  PC  games have always been 
written in C. When the  32bit  consoles  like  the Saturn and PSX came 
out, C became the language of  choice with only certain time intensive 
routines written  in  assembly.  As  PCs  have  got  faster  and their 
processors more complicated, optimising has  been left to the compiler 
with virtually no assembly going into the modern PC game.

From a PC programmers  perspective  C++  was  the  future and assembly 
language coding would  become  obsolete.  This  pleased PC programmers 
because the majority of them can't code in assembly. Unfortunately for 
them, Sony were  to  make  a  decision  that  would  change the entire 
industry. It was called the PlayStation2.

The PSX2 is a multiprocessor  architecture, and certain processors can 
*only* be coded in assembly. This  meant that years after the industry 
had declared assembly obsolete and  gone  after  people with good high 
level coding skills, they suddenly realised  they had a desperate need 
for old school programmers, hackers and demo coders.

So parade your assembly language programming skills with pride on your 
CV. This is a skill that is now highly in demand.

2. THE AGENCY
 
Once you have completed your CV, it  is  now time to get in touch with 
the games companies. You can either find every single address of every 
games company, contact them all  to  find  out  who is hiring and send 
your CV out to all of them, or  you  can let an agency do all the hard 
work.

An agency knows all the  software  companies.  It knows which ones are 
hiring, months before job adverts go into the magazines. It can assess 
your CV and send it the  companies  who  fit your skills. Best of all, 
agencies are completely free - you  have nothing to lose. Agencies get 
their money from the games  companies  -  if  you  get a job then that 
company has to pay the agency a finders fee - this doesn't come out of 
your pay.

If you want to send your CV off  to  a few companies off your own back 
then there is no harm in this,  but  be aware that some companies will 
only look at CVs  that  come  through  agencies.  If  look on some job 
adverts for companies they will  give  an  agency's contact address as 
the place to send CVs.

The agency will  arrange  interviews  with  you,  send  you background 
information on the companies and  details  on  how to get there. After 
your interview you talk to the agency and can get feedback of what the 
company thought of you.

3. THE INTERVIEW

This is the difficult part. Companies  are  spread over the country so 
be prepared to travel. Whilst  in  other  industries,  a smart suit is 
appropriate for  interviews,  this  is  not  the  case  in  the  games 
industry. Everyone dresses casually - even managers rarely wear suits. 
If you turn up in a suit then  it  will be obvious that you don't know 
much about the industry. Wear casual but reasonably smart clothes.

Try to get there about half an  hour  early  to give yourself a bit of 
leeway for traffic, delayed  trains  etc.  People  in the industry are 
 very busy and if you are late they may find it difficult to fit you in 
and give you a proper interview.

Interview procedure varies hugely from company to company. In some you 
will just have a half hour  chat  with  a producer. In others you will 
spend hours chatting to  range  of  programmers and management people. 
Some companies will have tests for  you  to complete. Others will give 
you problems that you will have  to  solve. And sometimes you are even 
set a task that you have to go  home and program and bring the results 
back.

In general you will be asked about  all  the skills you listed on your 
CV. You will probably be asked what  you think about the future of the 
games industry. You may be  asked  what  your  favourite games are and 
why. You may be asked what  you  think  makes  a good game. If you are 
being interviewed for a game, it  may  be  a  good idea to do a little 
background research on other games in that genre.

If you are not sure of an answer to a question, don't be afraid to say 
"I don't know", or "I would have to  ask a colleague" or "I would have 
to look  it  up".  You  are  not  expected  to  know  everything about 
everything, but you are expected to  show that you can co-operate with 
other team members and are  willing  to  find out information off your 
own back. Sitting  around  blankly  struggling  for  the  answer  to a 
question will get you know  marks  -  admitting  what you do and don't 
know is a key skill.

Personality wise you should  be  friendly  and approachable. Employers 
are looking for people who work  well  in a team. Communication skills 
are important - the games industry  is a very different situation from 
sitting alone in your bedroom with devpac.

Code design is an  important  issue.  As  multiple programmers work on 
each project, each has an area  of responsibility. A good interface to 
your module is  important.  Global  variables  and  data  are bad. You 
should  emphasise  the  importance   of   accessor  methods  and  data 
encapsulation. Commenting of code is also very important.
 
Don't shy away from selling your  skills, whether it be optimising, 3D 
coding, AI or physics. Show them that you have a valuable skill.

Money is difficult question. You  will  probably  be asked what salary 
you want. Wages for programmers new  to the industry vary from company 
to company, but it is generally  10K  at  the very bottom of the scale 
right up to 25k  if  you  are  exceptionally  talented. Generally, the 
range  is  currently  12-18k  for   a   programmer  with  no  industry 
experience. 15k is a good starting  figure.  Anything less and you may 
be underselling yourself, anything more and you are doing well. If you 
go low then you are more  likely  to  get  the  job as the employer is 
taking less of a risk on you.

4. THE OFFERS

After completing some interviews, hopefully  your agency will get back 
in touch to  let  you  know  you  have  some  job  offers. If multiple 
companies are after you, which one  should  you choose? This is a very 
personal choice, but there are a number of factors to consider:

        location

If the company is in the south  of  england then the cost of living is 
going to be a lot higher,  so  your  wages  will  need to be higher to 
compensate for this. These areas tend  to  be more peaceful, with less 
crime, but also less action if you enjoy going out. A lot of companies 
are based in small areas away from big  cities - so if you don't enjoy 
small town life these may not be the place for you.

        project

The actual title you are working  on should also affect your decision. 
Are you going to be working  on  an exciting innovative product, or is 
it just another sports/racing/fps that  the  market has seen a million 
times before? Original title are cool, but be aware they are also more 
risky as they are  likely  to  sell  less  and  there  will be greater 
 difficulty in finding a publisher.  There  is  also more likelihood of 
them getting canned. Remember that once  you have one title under your 
belt it is a lot easier to  move  elsewhere and work on an interesting 
title.

        technical direction

Is the company  forward  looking,  concentrating  on  bringing through 
technical innovations, or is it just copying the rest and churning out 
lots of very similar games? If the  company is not looking to innovate 
technically you may find that  you  are  not  really challenged at the 
company and may become bored there.

        people

Working hours in the games industry are  very  long - you are going to 
be a room with the same people for  12 hours a day, sometimes 7 days a 
week. You have to be able to get on with these people.

        platform

What platform is the project on?  Console  games are the ideal project 
to go for. ST  and  Falcon  programming  skills  adapt well to console 
programming, but they are far removed from PC programming. 

I would strongly advise  against  PC  programming  jobs.  The PC games 
scene is dying. Sales on  this  platform  are dismally low compared to 
console games sales. For example,  at  my last company the Playstation
version of our game outsold  the  PC version 12:1. Console programming 
skills are more specialist, more sought after and will pay better. 
Let's look at the possible platforms:

        PC

All university students and the  vast  majority of bedroom programmers 
have access to a PC so there is an abundance of PC programming skills. 
The competition is stiff -  you  will  be  up  against people who know 
 Windows, MFC, OpenGL and DirectX inside out.  You will have to learn a 
3D API ( D3D is the current  industry favourite ). Knowledge of MFC is 
extremely useful, as is knowledge  of  3D  packages like 3D Studio Max 
and their SDKs. 

The PC games scene is in  a  bad  state, with many companies switching 
away from this dull grey  box  to  work on PlayStation2 and DreamCast. 
Sales are poor, and you  will  be  making  games  for dads rather than 
kids. Avoid.

        GameBoy

The gameboy has been out for 10 year and it is more popular than ever. 
In Japan it is outselling all other consoles - its even outselling the 
PSX 3:1. A lot of GameBoy games are written entirely in assembler. The 
hardware is quite straightforward and can be learnt quite quickly. 

GameBoy projects have a quick turn around and seem to concentrate more 
on gameplay than technical effects which is also nice. 

As an added bonus, GameBoy programmers  will  be  the first to work on 
the GameBoy advance.

        Nintendo64

The N64 uses a very similar CPU  to  the PSX and PSX2, so any assembly 
language skills you pick  up  on  this  will  be easily transferrable. 
Unfortunately the N64 is very much at the end of its life, so you will 
spend all your time learning the hardware and only get one project out 
of it. But you  may  get  to  work  on  the  Dolphin ( next generation 
Nintendo ) quickly, which would be cool.

        PlayStation

Although the PlayStation2 is just  around  the corner, over 80 Million 
playstations have been  sold  worldwide  and  they  are  not  going to 
disappear overnight. There is  a  huge  demand  for  PSX programmers - 
 there just aren't enough of them out there. 

The PSX has a very nice RISC CPU which is easy to learn. To completely 
learn the graphics chip,  geometry  chip  and  CPU  will  take about 3 
months, but it is well worth it.  There is probably at least another 2 
years life in the old PSX, and your skills will transfer well to PSX2. 
If you are offered a PSX job, do not hesitate to accept.

        PlayStation2

Everyone wants to work on PSX2.  Unfortunately for the PC coders, they 
don't really have the skillset to  do  the job. Old school demo coders 
with assembly language skills have  a  good  chance  of landing a PSX2 
job. Its going to be the biggest  platform  out  there so if you get a 
shot at it, don't miss out.

        DreamCast

Although Sega's machine  has  WindowsCE  on  it,  fortunately  you can 
disable it and go direct to the hardware. It has a lovely RISC CPU and 
a really  good  graphics  chip  with  loads  of  texture  memory. Well 
programmed DreamCast titles can compete  with  the PSX2. The DreamCast
hardware  is  lot  easier  to  learn   than   PSX2,  and  a  lot  more 
straightforward. Well worth checking out.

        X-Box

Microsoft's forthcoming console. Basically,  this  is  just  a PC in a 
box. It is debatable whether it  will  be successful, especially as it 
is coming out after  the  PSX2  and  Dolphin  and  will not have major 
support from the japenese games  companies.  Again,  this is a machine 
that is best left for the dads.

IMPROVE YOUR SKILLS

If you want to impress  potential  employers,  you  should have a good 
knowledge of 3D graphics techniques. Coding 3D  stuff on a Falcon is a 
 very good start - it is a lot closer to a console than a PC is. If you 
can program the DSP  this  will  really  impress employers looking for 
PSX2 coders - parts of the Emotion Engine are very similar to the DSP.

To find out more about 3D programming, I highly recommend these books:

"Realtime 3D Graphics For The Atari ST" 
Andrew Tyler 
Sigma Press 
ISBN 1-85058-217-3

A good overview of how to write a simple 3D graphics system for the ST 
in assembly! 
It covers  the  basic  concepts  like  matrix  maths,  dot  and  cross 
products, scanline rendering, clipping, lighting, backface culling and 
sorting.

"Computer Graphics - Mathematical First Steps" 
P.A. Egerton & W.S. Hall 
Prentice Hall 
ISBN 0-13-599572-8

When working with more  complex  3D  graphical  techniques like curved 
surfaces, you will have to understand a  lot  of maths. This book is a 
refresher course for everyone whose maths is bit rusty (like me!). 

It takes you through basic trigonometry and matrix maths right through 
to curved surfaces. It's all presented  in  an easy to understand form 
with lots of examples and diagrams. Highly recommended.

"3D Computer Graphics - 2nd Edition" 
Alan Watt 
Addison Wesley 
ISBN 0-201-63186-5

An intermediate level book which covers a lot of useful 3D techniques. 
It is a lot more comprehensible  than  Foley  and Van Dam, but doesn't 
 cover as much material. A good companion to 'Advanced Animation..' and 
good for reference when Foley and Van Dam becomes too hard going.

"Advance Animation and Rendering Techniques" 
Alan Watt & Mark Watt 
Addison Wesley 
ISBN 0-201-54412-1

The follow up to 3D Computer  graphics.  This is a more advanced level 
tome and covers subject like Quaternions  and curved surfaces in a lot 
more detail. It's an essential read.

"Computer Graphics - Principles And Practice" 
Foley, Van Dam, Feiner & Hughes 
Addison Wesely 
ISBN 0-201-12110-7

This is the 3D  graphics  programmer's  bible.  It's  a huge book that 
covers  absolutely  *everything*.  Unfortunately   it   does  tend  to 
concentrate more  on  the  maths  and  theory  rather  than  practical 
application, and some of the  stuff  ( especially their transformation 
pipeline )  is  overly  complex.  But,  like  I  say,  it  does  cover 
everything.

Buy, beg, borrow or steal these books.


With the right CV, the right attitude,  and the right books to bolster 
your knowledge, you'll be waltzing into the games industry.
 
