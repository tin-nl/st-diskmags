       ____oooo----OOOO    Fast Sprites in STOS    OOOO----oooo____
       ************************************************************

                             By TK Dentrassi
                             ---------------

Ok all you Stos freaks out there, just how many of you use the sprite 
command? Huh!  If you do then if I was to mention the words slow, 
flickery and small, would you be reminded of them.
If this is the case then read on.

The trouble with Stos Sprites is that they usually take up most of the 
processor time when they are on the screen.  Yeah, It's nice to be able 
to preset their movements and to easily detect collisions but this does 
not help when everything is moving at about 10 vbl's.  What's more, if 
you want to use 2 screens you have to reserve a spare screen for the 
sprite background and have to keep screen copying the background to it.  
Still, the old Stos Sprite command has it's advantages, but if you 
prefer to have speed over ease of programming then you may prefer to use 
my routine.

This is what it offers:

Larger Sprites - up to 304x64.
Two different types of sprites, masked/not masked.
A great speed increase - eg. A 64x64 sprite in stos moving with the 
mouse takes up about 1.2 vbl's compiled.  My routine will show a sprite 
of that size with a mask, on two screens, also with the background being 
replaced at about .5 of a vbl.  Space enough for another 5 or 6 small 
sprites in the vbl.

What you lose out on:

Built in sprite collision (Something that can easily be 
programmed.  Eg. coming later!).
Fully interruptable sprites - probably the main use for the normal Sprite 
command.
MEMORY - And alot of it!

The routine uses a technique that will succeed in vastly increasing the 
speed of the sprites but at the cost of memory.

To help with the problem of memory loss I have made the thing pretty 
programmable, so that for instance, if you have a sprite you wish to 
display masked but not unmasked, you can tell the routine and it will 
save some memory for you.

So, you now come to the bit where you will either give up and just go 
back to using the Stos Sprite command, or will persevere and in no time 
start programming smooth games and demo's.

OK. First you will have to draw your sprites.  What?  Given up already! 
go and get someone who can make you some sprites (And while you're at it 
get them to draw me some as well).  To draw your sprites you will only 
need either a good art package or the Stos Sprite designer accessory.

When you have your sprites all ready for use, you will have to load up 
the Stos Sprite accessory to save them on a disk in the .MBK format.  
Just use each slot for a different sprite/animation and save them out as 
a sprite file.  If you intend to use sprites larger than 64 pixels 
across then you just have to break it up into 64 pixel chunks and place 
it in separate sprite slots. *Note - Make sure you place each bit next to 
each other in the Sprite bank and also make sure that all the bits of 
the big sprite are the same hight (The routine takes the hight of the 
first bit of the large sprite and joins the rest to it).

Once you have saved your sprites in .MBK format then you can start on 
your program.

The sprite routine itself is about 85 lines long in Basic and is 
numbered from line 100 to about 199.  This is important to note so that 
you leave space for it in your program.  I left lines 1-99 free so you 
can put in screen mode commands and other initialisation stuff.  You can 
renumber the routine if you like, but you must remember that it uses DIM 
commands, so if you are going to compile your program at some point you 
will need to have it close to the start of the program (or at least 
before you start using the sprites). *Note It is no use calling it as a 
subroutine at say line 1000 when you use the sprites at a line before 
that, because the compiler will not pick up the DIM commands until it 
has compiled your sprite movements.  This will cause it to say that you 
have not Dimensioned the array yet!

If you are getting confused, don't worry, It sounds hard but you will 
get used to it.  There will be some example files on this disk for you 
to look through and examine.

Basically what the routine does is to take your sprites from the sprite 
bank (Bank 1), and converts them to fast sprites.  After it does this 
you are free to use them with the following commands:

To put a masked sprite on the screen you would put this in - 

SCREEN$(logic, SCX1(SN(x)), SCY1(y))=TKSPRITE$(no, TKN(x))

The lower case variables can be changed, this is what they are:

logic - Screen where you wish the sprite to go
x     - X Coordinate for the sprite + 320
y     - Y Coordinate for the sprite + 64
no    - Sprite Number

To get rid of the masked sprite by replacing the background - 

SCREEN COPY picture, SCX1(SN(oldx)), SCY1(oldy), SCX2(ono,SN(oldx)), 
SCY2(ono,oldy) to logic, SCX1(SN(oldx)), SCY1(oldy)

Variables:

picture - The bank or address where the background screen is kept
oldx    - The old X Co-ordinate of the last sprite + 320
oldy    - The old Y Coordinate of the last sprite + 64
ono     - The old sprite number of the last sprite

The reason you have old Coordinates is to get rid of the sprite printed 
before and not the one you have just printed.  These two lines to place 
and delete a masked sprite are usually the other way around so that you 
clear the screen of sprites before you place the new one.

To place a unmasked sprite on the screen (These are much faster than 
masked sprites when the sprite is on the large side):

BACK=BCS(no, TKN(x))+START(14) : SCREEN COPY BACK, BCX1(no, TKN(x)), 
BCY1(no, TKN(x)), BCX2(no, TKN(x)), BCY2(no, TKN(x)) to logic, 
SCX1(SN(x)), SCY1(y)

And the Variables:

no    - Number of the Sprite
x     - X Coordinate of the Sprite + 320
y     - Y Coordinate of the Sprite + 64

To get rid of this Sprite you should do this:

CLS logic, colour, CLX1(SN(oldx)), CLY1(oldy) to CLX2(SN(no, oldx)), 
CLY2(no,oldy)

Variables:

logic  - Screen you wish to delete the Sprite from
colour - Colour of the background behind the Sprite
oldx   - X Coordinate of the old Sprite + 320
oldy   - Y Coordinate of the old Sprite + 64

Again, these two commands are normally the other way around.

It will be obvious that the disadvantage of the unmasked sprite is that 
you can only have it displayed on a plain background.  You could if you 
wish put the unmasked Sprite on a pictured background and use the erase 
masked sprite command to replace the picture, but you will see ugly gaps 
either side of the sprite.  Try it and see what happens.

The reason that the Coordinates of the Sprite have to have a figure 
added to them is so that you can scroll the sprite off of the side of 
the screen in any direction.

So, now I have explained the commands which place and erase the Sprites, 
I will now tell you more about how you can program the routine.

For each sprite you will use there will be three numbers you can change.  
These numbers are contained in the DATA statements at the end of the 
routine (About line 168).  These are what the three figures represent:

No 1. The first digit tells the routine how many pixels you will want to 
move the Sprite at along the X Axis.  If this is set to '1' then you 
will be able to move the Sprite anywhere around the screen.  If it is 
set to '2' then you will only be able to put the sprite on the X axis at 
a multiple of 2 (eg. 2,4,6,8...320).  With a figure of '4' you will only 
be able to put it at 4,8,12..320 etc.  If you have the digit at either 
2,4,8 or 16 then you will be saving memory than if you have it at 1.

No 2. This digit tells the routine if you want to use the sprite as a 
masked sprite or not.  '1' means you do, and a '0' means you don't.

No 3. This is the same as above but with the choice being on the 
unmasked sprite.

eg. DATA 1,1,1    This means you want to move the sprite at 1 pixel, you 
want it as a masked sprite, and you also want it as a unmasked sprite.

eg. DATA 1,0,1    Same as above but no masked sprite

eg. DATA 4,1,0    You want a masked sprite moving at 4 pixels sideways.

The data also specifies if you want to have a Sprite larger than 64 
pixels across.  If you do then you specify how many bits it is made out 
of in the Sprite selection.

eg. If you have a sprite sized 128x64, you would have to split it up 
into 2 bits (each 64x64 sized).  The data would look like this:

  eg. DATA 1,2,2     This means you want to move it at 1 pixel sideways, 
have a masked Sprite made up of two sprites in the bank, and also a 
unmasked sprite made up of two smaller ones.

  eg. DATA 1,2,0     You only want a masked version.

*NOTE it is important that if you want to have a larger sprite that you 
specify the same amount of bits to each sprite type.  You cannot enter 
DATA 1,3,2 as this is saying you want a masked Sprite of 3 bits and an 
unmasked Sprite of 2.  The one exception to this is if you don't want one 
of the types at all.
eg. DATA 1,0,3

Remember, if you have 20 Sprites in the Sprite bank and you want them 
all to be 64x64 or smaller then you will have 20 sprites in your 
program.  If you want some of these sprites being large sprites made of 
more than 1 bit then you will have less sprites in your program.

              |--------------------------------------------------|
Sprite Bank - |1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|
              |--------------------------------------------------|
Your Sprites- |1|2|3| 4 |5|6|7|8| 9|10|   11   |12|  13 |14|  15 |
              |--------------------------------------------------|
                      |                  |           |        |
                      --------------------           ----------
                               |                          |
                               ----------------------------
                                             |
                                      Larger Sprites

As in this case you are left with 15 sprites, you will have to enter 15 
sets of data that would look something like this:

DATA 1,1,1, 1,1,1, 1,1,1, 1,2,2, 8,1,1, 1,1,0, 1,1,1, 4,1,1, 1,0,1, 
1,1,1, 2,3,0, 1,1,1, 1,0,2, 1,0,1, 4,2,2

Sprites 1,2 and 3 could be different frames of animation for one Sprite.

Now you have your Sprite bank and data ready you can see if everything 
is going to work ok by loading up the routine, loading in your sprite 
bank into bank 1, change the data accordingly and run the routine.

If there are any errors, the screen will return to normal and a message 
will appear telling you what the error is and which line number it is 
in.  If it is a known error then it will give you a description of it as 
well.

Here is some additional information:

1. Hotspots are totally ignored.
2. Try to place all the larger sprites together, and all the smaller ones 
   together in the bank, this will usually save memory.
3. The routine uses bank 14 as work.
4. It uses the background screen for calculating the sprites.
5. It turns off the mouse pointer, cursor, flash, sprites and the key.
6. It turns on the ON ERROR GOTO.. statement for error checking.
7. You can save additional memory by deleting the rem statement at line 
   167, but you should normally do this when you are compiling.
8. It took 2 days to write and debug.
9. The Graphics for the examples were taken from the amazing game 
   called 'Enchanted land' by Nick of TCB and ES of Tex.
10. The example files are called 'SPRITES.BAS', 'TRACKING.BAS', and 
    'FAST.BAS".  All can be compiled with no tests and no buffer space, 
    apart from TRACKING.BAS which will need - SHOW MOUSE, LOADED MOUSE 
    POINTER LOW and 32K WINDOW BUFFER. 
11. The keys for the Tracking program are: '-' decrease no. of sprites, 
    '+' increase no. of sprites, 'return' switch modes, 'left mouse 
    button' left 1 sprite, 'right mouse button' right 1 sprite.
12. If you want to contact me for information about bugs you have 
    found then write to :

    TK, 35 Hugin Ave, St. Peters, Broadstairs, Kent.  CT10 3HP

