
                     - GFA PROGRAMMING (2)-
                               by
                         DOGUE DE MAUVE
                              from
                           OVERLANDERS


Yo, men! This is me again, for the second part of my article 
about GFA PROGRAMMING (have a look at the title...).
This time, we are going to speak about scrollings. Several french 
guys asked me for some technics to make scrolltexts and, as it is 
something useful in demo coding, I decided to include it in this 
article (I just assume you read my previous writing about VBL and 
screen swapping). As a bonus, you'll get some very nice GFA 
"rasters" technics

Ah, a few things I forgot to mention about the ULTIMATE GFA DEMO:

Of course, the "OVR background moving fullscreen" isn't in GFA. 
It's the OVERLANDERS anti-virus bootsector (which looks quite 
strange on STE, it's the reason why we didn't spread it that 
much)!
But every other thing is in pure GFA BASIC 3.03...
It seemed obvious to us that when we copied some well-known 
screens, we didn't intend to beat, or even to equal, them in 
BASIC...
Last thing: it looks like only very few guys read the 
SCHNUFFLEPUNKMEYER scrolltext and discovered that this demo was a 
little shoot'em up game. So, for all the others, press F1 and use 
your JOYSTICK...  OK, let's talk about programming, now.

ERRATUM: yes, the ultimate gfa dumbhead (me!) made some stupid 
mistakes in the previous articles. I forgot to change some data 
names in my original INIT rout... Here are the real lines to
create a new screen buffer:

...
  screen1%=XBIOS(3)
  buffer%=MALLOC(32255)          ! create a screen buffer...
  screen2%=buffer% AND &HFFFF00  ! address==>256
  VOID XBIOS(5,L:screen2%,L:screen1%,-1) ! to work on the buffer
...

Let's talk about scrolling now and just hope I won't make any 
more mistakes in this article...

The GFA scrolltext:

You should find a SCROLL.LST sourcecode (ASCII format) on the 
disk, along with the SCROLL.TXT and FONTS.PI1 files. They will be 
useful to actually code a scrolling in GFA but you ought to read 
this articles first.

Well, when you want to do a nice scroller in GFA (or even in 
ASM), the first thing you need is a nice characterset (font).
For our purpose here, we will use the very simple 32x32 fonts of 
the FONTS.PI1 file (you should try to use your own 16 colors 
fonts)

The methods I'll (try to) teach you aren't the best so far. But, 
well, it's just a beginning. We should soon see some more 
interesting stuff, with fast display and programming tricks...

What about some theorical principles?

When you make a scrolltext, you're supposed to write stuff that 
people will be able to read. So, your scroll has to be smooth and 
slow enough to let all guys see how good you're at writing.
To make it smooth, you'll have to use the fastest GFA instructions.
The best GFA instruction so far is BMOVE. It's a really powerful 
well-optimized command, very useful for fast work in demos.
BMOVE allows you to move memory blocs wherever you want. We will 
use it here to scroll the screen horizontaly. The problem is that 
when you move memory on the screen, you must use 16 pixels steps 
(it's due to the ST bitplanes organization). A 16x16 pixels 
scroller is very fast and nearly unreadable. We have to do a 8x8 
scroller. It means we will use 8 pixels width font blocks. So, if 
we use such blocks and make a 16x16 scroll, we will have to 
display two 8 pix. blocks (I hope you agree with me). But, the 
scroll is still 16x16.
Here's the trick to get a 8x8 scroller (quite hard to explain, 
especially in english, but I will do my best to be clear):
Every VBL (1/50"), we display 2 blocks. First VBL, we display the 
blocks A & B. Next VBL, we swap the screens and increase the text 
counter. Then, we display blocks B & C. As you can see, the block 
B is on the the two screens but not at the same position: it 
moved from 8 pixels!
This is the way to make a 8x8 pixels scroller! Yeah! (I hope you 
understood these bad explanations).
Let's have a look at the GFA scrollrout:

  INC tt%                          ! Increase text counter
  tt%=MOD(tt%,tl%)                 ! If end of text then wrap

Here comes the real "scroll":

  BMOVE xb2%+8,xb2%,31*160-8  ! Scrolls the screen (16 pix. left)
  
IMPORTANT: a screenline is composed of 320 pixels, each of them 
coded on 4 bits (4 bitplanes=16 colors). When you use BMOVE, you 
use bytes (8 bits). So, a line is made of 160 bytes. 
With the code-line above, we take a memory block from the logical 
screen (xb2%) + 16 PIXELS (8 bytes) and we copy it to logical 
screen + 0 pixels (it means we make a 16x16 scroll from right to 
left). The amont of memory we want to scroll is 31 (the font 
height) x 160 (a screenline) - 8 (becoz the source address was 
xb2%+8). OK?

So, we managed to scroll the screen. But we still have to display 
the font blocks. Here it is:

  PUT 304,0,alf$(BYTE{scr%+tt%})   ! Put first precalculated block

We previously cut all font blocks and put them in the ALF$ buffer 
(we've got 60 letters of 4 blocks: 60x4=240. The bloc numbers 
is from 0 to 239 and can be coded on a byte).
So, we wrote every number in another buffer called SCR% and we 
just need to get it now using BYTE{address}.

  PUT 312,0,alf$(BYTE{scr%+tt%+1}) ! Put second precalculated block

We put the second block next to the first (same method).

Let's have a look at all those precalculations we need:

  DIM alf$(250)           ! Create a buffer for font blocks
  FOR q%=32 TO 91
    GET 0,0,0,0,alf$(q%)  ! Clear all font blocks
  NEXT q%
  '
  ' 8 pixels font blocks cutting
  '
  chargimage("FONTS") ! Load the font picture & cut every block
  '
  CLR q%
  FOR y%=0 TO 5
    FOR x%=0 TO 9
      GET x%*32,y%*32,x%*32+7,y%*32+31,alf$(q%)        ! Block 1
      GET x%*32+8,y%*32,x%*32+15,y%*32+31,alf$(q%+1)   ! Block 2
      GET x%*32+16,y%*32,x%*32+23,y%*32+31,alf$(q%+2)  ! Block 3
      GET x%*32+24,y%*32,x%*32+31,y%*32+31,alf$(q%+3)  ! Block 4
      ADD q%,4
    NEXT x%
  NEXT y%

Here we cut 6*10*4=240 blocks. We use the ASCII table. So, the 
first character (blocks nø0-3) is the space (ASCII nø32). 

  '
  ' Read scrolltext and precalculate the blocks
  '
  OPEN "I",#1,"SCROLL.TXT"
  t$=INPUT$(LOF(#1)-1,#1)   ! Get the scrolltext in t$
  CLOSE
  tl%=LEN(t$)
  scr%=MALLOC(tl%*4)        ! Lenght of text*4 blocks
 
SCR% is the buffer where we will write all used blocks.

  '
  ' We precalculate every bloc used in the scrolltext
  ' (quite a bad method which uses too much memory, actually)
  '
  FOR q%=0 TO tl%
    a%=(ASC(MID$(t$,q%,1))-32)*4  ! Get & write the block numbers
    BYTE{scr%+i%}=a%
    BYTE{scr%+i%+1}=a%+1
    BYTE{scr%+i%+2}=a%+2
    BYTE{scr%+i%+3}=a%+3
    ADD i%,4
  NEXT q%
  MUL tl%,4

OK. I'm a bit bored with all these explanations. I hope you 
understood the method and you will be able to use it to do some 
cool scrollers in GFA BASIC 3.

Of course, we do not use this technic in our own screens. Next 
time, I will teach you how to do fast display instead of GET & 
PUT and another trick to spare memory ('coz all those bad 
precalculations take too much space). 

Well. When I decided to send you a sourcecode for scrolltext, I 
just wanted to do something very easy. But I found this was bad, 
actually. So, I included some great (for GFA, of course) rasters
routs to make the scroll a bit less boring. Let's have a look at 
them:

The first thing, with rasters, is to create them (yeah! great 
scoop!). I usually use SPECTRUM 512 for this purpose 'coz it's a 
great tool. But, well, here's a little GFA routine to create some 
simple rasters. Every color of the rasters is coded on 2 bytes (a 
word). The way to create every color can seem quite complex but 
it's because I wanted to code it in HEXADECIMAL format: i.e $RGB 
(Red, Green, Blue - each from 0 to 7). Well I won't bother you 
with some explanations about that stuff...

  '
  ' Rasters creation
  '
  CLR i%
  raster%=MALLOC(1000)
  FOR r%=1 TO 7
    ADD i%,2
    CARD{raster%+i%}=VAL("$"+STR$(r%)+"00")   ! Red
  NEXT r%
  FOR r%=7 TO 1 STEP -1
    ADD i%,2
    CARD{raster%+i%}=VAL("$"+STR$(r%)+"00")
  NEXT r%
  FOR g%=1 TO 7
    ADD i%,2
    CARD{raster%+i%}=VAL("$0"+STR$(g%)+"0")   ! Green
  NEXT g%
  FOR g%=7 TO 1 STEP -1
    ADD i%,2
    CARD{raster%+i%}=VAL("$0"+STR$(g%)+"0")
  NEXT g%
  FOR b%=1 TO 7
    ADD i%,2
    CARD{raster%+i%}=VAL("$00"+STR$(b%))      ! Blue
  NEXT b%
  FOR b%=7 TO 1 STEP -1
    ADD i%,2
    CARD{raster%+i%}=VAL("$00"+STR$(b%))
  NEXT b%
  '
  CLR i%
  pattern%=MALLOC(1000)
  FOR q%=0 TO 400 STEP 2
    CARD{pattern%+q%}=q%                     ! Font rasters
  NEXT q%

So, here we've got 2 buffers: the first one contains all 
background rasters (the RASTER% buffer) and the other contains 
the rasters in the letters (the PATTERN% buffer)

Here is now the actual raster rout, one of the best in GFA (I 
think so, but I am eager to see your work!).

  '
  ' HBL synchronization (for steady rasters)
  '
  REPEAT
  UNTIL BYTE{&HFFFF8209}>0
  VOID shl(BYTE{&HFFFF8209})

This three lines are very important. It is what we call the 
"HBL SYNCHRO". You'll see it's very helpful to get steady rasters. 
The rasters would be steadier if we had cut the interruptions 
but, well, it's quite dangerous (can crash the ST!). 
(hint about this programming technic: how do you think we managed 
to remove the low border in our GFA demos?).
  '
  ' Rasters
  '
  r%=raster%
  p%=pattern%
  FOR q%=0 TO 200
    CARD{&HFFFF8240}=CARD{r%} ! Raster 1 (change color 0)
    CARD{&HFFFF825E}=CARD{p%} ! Raster 2 (change color 15)
    CARD{&HFFFF8240}=CARD{r%} ! Repeat it 'coz it's too fast
    CARD{&HFFFF825E}=CARD{p%} ! (something too fast in GFA????)
    ADD r%,2
    ADD p%,2
  NEXT q%

Yes, you don't dream, we do each raster twice, 'coz it's TOO FAST 
in GFA! (funny, isn't it?). So, we get the raster color with the 
CARD{r% or p%} command and then write it in the ST palette address 
($FFFF8240). If you want to change the color 0, use $FFFF8240. To 
change color 1, use $FFFF8242, color 15, $FFFF825E and so on... 
Easy, isn't it? And faster than SETCOLOR, actually!

The main problem with GFA rasters is that they aren't on 
interrupt. So, if you want to do rasters on the whole screen, it 
will take the whole VBL. If you don't need thin rasters, you can 
try to do something else between every color (that's what we do 
in the SPREADPOINT DEMO 2).


OK, I will stop here for this article. I hope you dig almost 
everything I tried to explain... If you've some questions, ideas 
or anything you would like to tell me (except insults, we are fed 
up with it), here's my address:


                         DOGUE DE MAUVE
                         chez LE PENNEC
                     12, avenue d'argenteuil
                         92600 ASNIERES
                             FRANCE

Do not forget to include a reply coupon or I won't be able to 
answer.

            'Hope to read you soon and may the Mauve be with you,

                                        DOGUE DE MAUVE (from OVR)




  

