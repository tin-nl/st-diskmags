        
                GFA BASIC COMMANDS #1 
                        BY SAMMY JOE (Michael Schuessler)

In this issue I will explain some GFA Basic commands and 
their function. I am not doing all because I reckon you should
buy this great language if you think the following commands are
good. 
Thanks to GFA for allowing me to use this!!!!!

      ABS

HOW:       ABS(X)
EG:        A=-2329
           PRINT ABS(A)
PURPOSE:   RETURNS THE ABSOLUTE VALUE OF A NUMBER

      
      ADD
HOW:       ADD VAR,N
EG:        ADD B,12      (Same as  LET B=B+12  but twice as fast)
PURPOSE:   INCREASE VALUE OF VAR BY N


      ALERT
HOW:       ALERT A,MESSAGE$,B,BUTTON$,VAR
EG:        M$="ARE YOU SURE| ABOUT THIS?"
           ALERT 2,M$,"YES|NO|MAYBE",B
           PRINT B
PURPOSE:   CREATES AN ALERT BOX
'A'        CHOOSES TYPE OF ALERT SYMBOL, 0=NONE, 1=!, 2=?, 3=STOP 
'MESSAGE$' CONTAINS MAIN TEXT. UP TO 4 LINES OF 30 CHARACTERS/LINE
           LINES ARE SEPARATED BY THE '|' SYMBOL
'BUTTON$'  CONTAINS TEXT FOR THE BUTTONS (MAX 3, MAX 8 LETTERS)  
           BUTTONS ARE SEPARATED BY THE '|' SYMBOL
'B'        ONE BUTTON CAN BE HIGHLIGHTED (0,1,2,3) THIS BUTTON
           CAN THEN BE SELECTED BY JUST PRESSING RETURN
'VAR'      THIS VARIABLE IS SET TO THE NUMBER OF THE BUTTON
           SELECTED


      ARRAYFILL
HOW:       ARRAYFILL FIELD(),N
EG:        DIM A%(3,20),B(100)
           ARRAYFILL A%(),12
           C=7
           ARRAYFILL B(),C
PURPOSE:   ASSIGNS THE VALE 'N' TO ALL ELEMENTS OF A FIELD ARRAY
           

      ARRPTR
HOW:       ARRPTR(VAR)
EG:        A$="BASIC"
           PRINT ARRPTR(A$)]
           PRINT LPEEK(ARRPTR(A$))
           PRINT DPEEK(ARRPTR(A$)+4)
PURPOSE:   FINDS THE ADDRESS OF THE (6 BYTE LONG) DISCRIPTOR OF
           A STRING OR FIELD
           THE ABOVE EXAMPLE FINDS THE START ADDRESS AND LENGTH
           OF A$

 
     ASC
HOW:       ASC(X$)
EG:        A$="ZX81"
           PRINT ASC(A$)
PURPOSE:   FINDS THE ASCII CODE OF THE FIRST CHARACTER OF A STRING


      ATN
HOW:       ATN(X)
EG:        INPUT SLOPE
           RAD=ATN(SLOPE/100)
           GRAD=RAD*180/PI
           PRINT GRAD
PURPOSE:   RETURNS THE ARC TANGENT OF X
           THE ABOVE EXAMPLE CALCULATES THE ROAD ANGLE FROM THE
           PERCENTAGE SLOPE GIVEN ON ROAD SIGNS.
           'PI' IS A CONSTANT IN GFA BASIC
           

      BIN$
HOW:       BIN$(X)
EG:        A=234
           PRINT BIN$(A)
PURPOSE:   CHANGES VALUE OF 'X' TO A STRING CONTAINING THE 
           BINARY VALUE OF 'X'. X CAN BE AN INTEGER FROM
           -2147483648 AND +2147485648


      BLOAD / BSAVE
HOW:       BLOAD "FILENAME" [,ADDRESS]
           BSAVE "FILENAME",ADDRESS,LENGTH
EG:        BSAVE "A:SCREEN",XBIOS(2),32000
           CLS
           BLOAD "A:SCREEN",XBIOS(2)
PURPOSE:   LOAD AND SAVE MEMORY FROM AND TO DISC DRIVE
           XBIOS(2) IS THE SCREEN START ADDRESS


      BOX
HOW:       BOX X,Y,XX,YY
EG:        BOX 10,10,20,20
PURPOSE:   DRAWS A RECTANGLE WITH DIAGONALLY OPPOSITE CORNERS
           AT (X,Y) AND (XX,YY)


      C:
HOW:       C:VAR(PARAMETERS)
EG:        Q%=VARPTR(Q$)
           A=C:Q%(17,L:0,W:-1)
PURPOSE:   CALLS A COMPILED C PROGRAM WITH TRANSFER OF 
           PARAMETERS AS IN C
           'VAR' IS A NUMERIC VARIABLE WHICH CONTAINS THE
           START ADDRESS OF A C: ROUTINE 
           'PARAMETERS' IS A LIST OF THE PARAMETERS EITHER
           AS 16 OR 32 BIT WORDS WHICH ARE TO BE PASSED TO THE
           ROUTINE 32 BIT LONG-WORDS SHOULD BE PREFIXED 'L:'
           AND 16 BIT WORDS SHOULD BE PREFIXED W: OR HAVE NO
           PREFIX


      CALL
HOW:       CALL VAR
           CALL VAR(PARAMETERS)
EG:        CALL TEST(3,I%,A$)
PURPOSE:   CALLS A MACHINE CODE PROGRAM AT ADDRESS 'VAR'
           'PARAMETERS' IS A LIST IF PARAMETERS WHICH ARE TO BE 
           PASSED TO THE ROUTINE. IN THE 'STACK' THE ROUTINE 
           RECEIVES THE NUMBER OF PARAMETERS AS A 16 BIT WORD AND
           THE ADDRESS OF THE LIST AS A 32 BIT LONG-WORD
           IN THE CASE OF STRINGS, THE START ADDRESS IS GIVEN.


      CHAIN
HOW:       CHAIN "FILESPEC"
EG:        SAVE "PROGRAM"
           CHAIN "PRO*"
PURPOSE:   LOADS A PROGRAM FILE INTO THE WORK AREA AND STARTS IT
           IF NO EXTENSION IS GIVEN IN THE FILE NAME THEN BASIC
           ADDS THE EXTENSION .BAS.   IF FILESPEC IS NOT IS QUOTES
           THEY ARE ASSUMED PRESENT.


      CHDIR
HOW:       CHDIR "DIRECTORY NAME"
EG:        MKDIR "\DIR1"
            MKDIR "\DIR1\DIR2"
             CHDIR "\"
             FILES
             CHDIR "\DIR1"
             FILES
PURPOSE:   CHANGES THE CURRENT DIRECTORY
           IN THE NAMING OF THE DIRECTORY THE HIERARCHICAL FILE
           SYSTEM ( \ ) CAN BE USED.
           CHDIR  "\" SWITCHES TO THE ROOT DIRECTORY.   TO SWITCH
           TO AN OTHER, THE PATH MUST BE GIVEN, ALWAYS BEGINNING
           WITH "\" WHEN STARTING OUT FROM THE ROOT.

           
      CHDRIVE
HOW:       CHDRIVE N
EG:        CHDRIVE 1
             FILES
             CHDRIVE 2
             FILES
PURPOSE:   SETS THE DEFAULT DISK DRIVE
           'N'  IS AN EXPRESSION, OF VALUE 1-15.  CHDRIVE 0 WILL
           CAUSE THE SYSTEM TO ABORT
 

     CLEAR
HOW:       CLEAR
EG:        A=17
             B$="BASIC"
             CLEAR
             PRINT A,B$
PURPOSE:   CLEARS ALL VARIABLES AND FIELDS
           ALL NUMERIC VARIABLES BECOME 0 AND ALL STRINGS ARE NULL
           THE COMMAND MAY NOT BE USED WITHIN PROCEDURES OR WITHIN
           FOR - NEXT LOOPS


      CLEARW
HOW:       CLEARW N
EG:        CLEARW 2
PURPOSE:   CLEARS THE CONTENTS OF THE WINDOW NUMBERED 'N'


      CLOSE
HOW:       CLOSE [ [#] N]
EG:        OPEN "O",#1,"PRO"
             PRINT #1,"GFA BASIC"
             CLOSE #1
             OPEN "I",#1,"PRO"
             INPUT #1,A$
             CLOSE
             PRINT A$
PURPOSE:   CLOSE A DATA CHANNEL OR A CHANNEL TO THE DISK DRIVE
           'N' IS A NUMBER FROM 0-99, WITHOUT IT ALL ARE CLOSED

      CLOSEW
HOW:       CLOSEW N
EG:        CLOSEW 2
PURPOSE:   CLOSED THE WINDOW NUMBERED 2
           CLOSEW 0 SWITCHES TO NORMAL SCREEN DISPLAY.  THIS 
           COMMAND MUST ONLY BE USED WHEN A WINDOW DISPLAY IS
           COMPLETED


      CLS
HOW:       CLS [#N]
EG:        PRINT AT(32,13);" PRESS A KEY! "
             A=INP(2)
             CLS
PURPOSE:   CLEARS THE SCREEN
           THIS IS IDENTICAL TO PRINT CHR$(27);"E"; AND CAUSES
           THE SCREEN TO BE CLEARED, AND THE CURSOR RETURNED TO
           THE HOME POSITION
           IT CAN ALSO BE USED IN DATA CHANNELS (OPENED WITH -
            OPEN "",#1,"VID:")  


      COLOR
HOW:       COLOR C
EG:        PCIRCLE 100,100,100
             COLOR 0
             LINE 0,0,200,200
PURPOSE:   SETS THE COLOUR FOR DRAWING
           THIS COMMAND IS USED WITH DRAWING COMMANDS  BOX, CIRCLE
           DRAW, ELLIPSE, LINE, PLOT AND RBOX


      CONT
HOW:       CONT
EG:        - NOT APPLICABLE -
PURPOSE:   RESUMES EXECUTION OF A PROGRAM
           THIS COMMAND IS USED ONLY IN DIRECT MODE TO CONTINUE THE
           EXECUTION OF A PROGRAM AFTER INTERRUPTION


      COS
HOW:       COS(X)
EG:        1)  INPUT RAD
               PRINT GRAD
               PRINT COS(GRAD*PI/180)
           2)  PLOT 320,300
               FOR I=1 TO 5400
                 X=I/36*COS(I*PI/180)
                 Y=I/36*SIN(I*PI/180)
                 DRAW TO 320+X,200+Y
               NEXT I
PURPOSE:   RETURNS THE COSINE OF VALUE X
           X IS AN ANGLE, FOR WHICH THE COSINE IS CALCULATED,
           IN THE RADIAN MEASURE (RAD)
           IF THE ANGLE IS TO BE INDICATED IN DEGREES, 'X' IS
           REPLACED BY GRAD*PI/180


      CVI   CVL   CVS   CVF   CVD
HOW:       CVI (X$) ... CVD (X$)
EG:        A=0.1111
             A$=MKF$(A)
             PRINT CVF (A$)
PURPOSE:   CHANGES CHARACTER STRINGS INTO NUMERIC VARIABLES
      CVI  CHANGES A 2-BYTE STRING INTO A 16-BIT INTEGER
      CVL     "    " 4-BYTE    "    "   " 32-BIT    "
      CVS     "    " 4-BYTE ATARI BASIC STRING INTO A NUMBER
      CVF     "    " 6-BYTE GFA     "      "    "   "   "
      CVD     "    " 8-BYTE MBASIC FORMAT  "    "   "   "
           IF THE LENGTHS ARE LONGER THAN ALLOWED, ONLY PART OF
           THE STRING WILL BE CONVERTED.  IF THEY ARE TOO SHORT
           THE VALUE 0 WILL BE RETURNED


      DATA
HOW:       DATA [CONST[,CONST] ...]
EG:        READ A,B$,C$,D,E!
             PRINT A;B$;C$;D;E!
             DATA 234,"G,F,A",  BASIC,&HFF,56
PURPOSE:   USED AS MEMORY VARIABLES WHICH CAN BE READ BY THE READ
           COMMAND
           THE CONSTANTS ARE SEPERATED BY COMMAS.  INVERTED COMMAS
           ARE ONLY NEEDED WITH STRINGS THAN CONTAIN COMMAS.  IF 
           THERE ARE ANY SPACES BEFORE OR AFTER THE COMMA THEY ARE
           TAKEN AS BEING PART OF THE STRING.  IF NOTHING FOLLOWS
           THE DATA STATEMENT, THE STRING IS TAKEN TO BE EMPTY


      DATE$
HOW:       DATE$
EG:        DEFTEXT 1,16,0,32
             PRINT DATE$
             TEST 240,180,DATE$
PURPOSE:   CREATES A DATE FUNCTION
           IT CREATES A CHARACTER STRING WHICH DISPLAYS THE SYSTEM
           DATE IN THE FORMAT:  DD.MM.YYYY


      DEC
HOW:       DEC VAR
EG:        T=TIMER
           A%=1000
           FOR I%=1 TO 1000
             DEC A%
           NEXT I%           
           PRINT (TIMER-T)/200
PURPOSE:   REDUCES THE VALUE OF 'VAR' BY 1
           IT IS IDENTICAL TO VAR=VAR-1, BUT IS 3 1/2 TIMES FASTER


      DEFFILL
HOW:       DEFFILL [C],[A],[B]     OR
             DEFFILLL [C],A$
EG:        BOX 100,100,400,300
             DEFFILL 1,2,9
             FILL 50,200
             DEFFILL ,,10
             FILL 320,200
PURPOSE:   SETS FILL-IN COLOUR AND PATTERN, OR ALLOWS USER-DEFINED
           PATTERNS
           THE PATTERN IS SET WITH 'C' AND THE COLOUR BY 'A,B'
           THE TYPE OF FILLIN IS SET BY 'A':
           0=EMPTY, 1=FILLED IN, 2=DOTS, 3=STRAIGHT LINES, 4=USERS
           24 DOTTEN PATTERS AND 12 LINED CAN BY CHOSED WITH 'B'
           A USER-DEFINED FILL PATTERN IS DEFINED IN THE SECOND
           VARIATION - DEFFILL C,A$   THIS IS ACHIEVED BY DEFINING
           A 16 X 16 BIT PATTERN ARRAY.  THE DEFINING STRING A$ IS
           THE RESULT OF LINKING (WITH +) 16 BIT-PATTERN NUMBERS
           WHICH HAVE BEEN STRUNG TOGETHER WITH THE FUNCTION MKI$,
           EACH NUMBER REPRESENTS ONE LINE OF THE ARRAY.


      DEFFN
HOW:       DEFFN NAME [(VARLIST)]=EXPRESSION CALLED UP BY:
              FN NAME [(LIST OF EXPRESSIONS)]
EG:        DO
             INPUT X
             PRINT X,FN THREE,FN MULT(10)
           LOOP
           DEFFN MULT(Y)=Y*FN THREE
           DEFFN THREE=3*X
PURPOSE:   DEFINES SPECIFIC USER FUNCTION
           THE FUNCTION IS DEFINED USING DEFFN, AND CALLED BY FN.
           WHEN CALLING UP THE FUNCTION BY FN OR @, ALL VARIABLES
           IN 'EXPRESSION' ARE GIVEN THE CURRENT VALUES AT THE 
           TIME AFTER WHICH THE VALUE OF THE FUNCTION IS 
           CALCULATED AND RETURNED
           ALL DEFFN FUNCTIONS ARE INTERPRETED FIRST, AND SO CAN 
           BE ANYWHERE IN THE PROGRAM


      DEFLINE
HOW:       DEFLINE (S),(B),(A),(E)    (COMMAS ARE OPTIONAL)
EG:        DEFLINE 1,10,2,1
             LINE 140,25,350,25
             PRINT AT(1,2);"A=2 E=1  B=10:"
             FOR I=1 TO 6
               PRINT "S=";I;":"
               DEFLINE I,1,0,0
               LINE 50,25+I*16,350,25+I*16
             NEXT I
PURPOSE:   SETS LINE STYLE, WIDTH & TYPE OF LINE BEGINNING AND END
           THE LINE WIDTH IN GRAFIC DOTS IS SET BY 'B'.  THE TYPE
           OF BEGINNING & END ARE SET BY 'A' AND 'E'.  0=NORMAL,
           1=ARROW, 2=ROUNDED.  'S' = LINE STYLE


      DEFLIST
HOW:       DEFLIST X
EG:        DEFLIST 0
PURPOSE:   DEFINES THE PROGRAM LISTING FORMAT
           X = 0:  THE COMMAND AND FUNCTION NAMES ARE WRITTEN  OUT 
           IN FULL IN CAPITAL LETTERS,  AND VARIABLES ARE  WRITTEN 
           IN SMALL LETTERS.
           X<>0:   THE FIRST LETTER OF FUNCTION AND VARIABLE NAMES
           ARE CAPITAL, AND THE REST ARE SMALL LETTERS


      DEFMARK
HOW:       DEFMARK [C],[A],[G]
EG:        DIM X(5),Y(5)
             DO
               FOR I=0 TO 5
               X(I)=RANDOM(640)
               Y(I)=RANDOM(400)
             NEXT I
             DEFMARK 1,RANDOM(7),0
             POLYMARK 6,X(),Y()
           LOOP
PURPOSE:   SETS COLOUR,TYPE AND SIZE OF THE CORNER POINTS TO BE
           MARK USING THE COMMAND POLYMARK
           'C' IS THE COLOUR REGISTER NUMBER
           'A' DEFINES THE TYPE OF MARK. THE FOLLOWING TYPES
           ARE POSSIBLE :-
           1=DOT
           2=PLUS SIGN
           3=ASTERISK
           4=SQUARE
           5=CROSS
           6=HASH
           ALL OTHER VALUES RETURN THE ASTERISK SYMBOL
           'G' SETS THE SIZE OF MARK


      DEFMOUSE
HOW:       DEFMOUSE N        or
           DEFMOUSE A$
EG:        FOR I=0 TO 7
             DEFMOUSE I
             PAUSE 100
           NEXT I
           X$=MKI$(1)
           Y$=MKI$(1)
           MF$=MKI$(0)
           CF$=MKI$(1)
           M$=MKI$(65535)
           FOR I=1 TO 14
             M$=M$+MKI$(32769)
           NEXT I
           M$=M$+MKI$(65535)
           C$=MKI$(0)
           FOR I=1 TO 14
             C$=C$+MKI$(36766)
           NEXT I
           C$=C$+MKI$(0)
           A$=X$+Y$+MKI$(1)+MF$+CF$+M$+C$
           PBOX 10,10,200,200
           DEFMOUSE A$
           DO
           LOOP
PURPOSE:   CHOOSES A PRE-DEFINED MOUSE FORM OR DEFINES A NEW ONE
           THE FOLLOWING MOUSE FORMS ARE AVAILABLE :-
           0=ARROW             1=EXPANDED (ROUNDED) X
           2=BEE               3=POINTING HAND
           4=OPEN HAND         5=THIN CROSSWIRE
           6=THICK CROSSWIRE   7=BOARDERED CROSSWIRE
           A MOUSE CAN BE DEFINED BY THE COMMAND DEFMOUSE A$
           16*16 DOTS ARE AVAILABLE TO CREATE A SHAPE. ALSO
           A 'MASK' MUST BE DEFINED SO THAT THE CURSOR REMAINS
           VISIBLE WHEN IT IS THE SAME COLOUR AS THE BACKGROUND
           ONE OF THE 256 DOTS MUST BE DEFINED AS THE STARTING
           POINT TO WHICH THE MOUSE FUNCTIONS WILL RELATE.

           THE DEFINING STRING IS COMPOSED AS FOLLOWS:-

           A$=MKI$       (X=STARTING POINT)
             +MKI$       (Y=STARTING POINT)
             +MKI$(1)
             +MKI$       (MASK COLOUR)
             +MKI$       (CURSOR COLOUR)
             +M$         (BIT PATTERN OF MASK)
             +C$         (BIT PATTERN OF CURSOR)
             

      DEFTEXT
HOW:       DEFTEXT [C],[S],[R],[G]
           (The commas can be omitted)
EG:        DEFTEXT 1,16,0,32
           TEXT 10,50,"BORDERED"
           DEFTEXT 24,900
           TEXT 500,300,"OUTLINED/UNDERLINED"
PURPOSE:   DEFINES THE COLOUR,STYLE,ROTATION AND SIZE OF TEXT
           TO BE PRINTED USING THE TEXT COMMAND
           'C' COLOUR REGISTER NUMBER
           'S' TEXT STYLE (0=NORMAL 1=BOLD 2=LIGHT 4=ITALIC
           8=UNDERLINED 16=BORDERED) THE STYLES CAN BE COMBINED
           BY ADDING THE SINGLE VALUES OF EACH TOGETHER
           eg. BOLD ITALICS WOULD BE STYLE 5 (1+5)
           'R' ROTATION ONLY THE FOLLOWING ANGLES (IN TENTHS OF
           A DEGREE) ARE POSSIBLE :-
           0 DEG (0), 90 DEG (900), 180 DEG (1800), 270 DEG(2700)
           'G' SIZE OF TEXT  4=ICON, 6=8*8 ,13=STANDARD
           32=ENLARGED PRINT


      DFREE
HOW:       DFREE(N)
EG:        PRINT DFREE(0)
           PRINT DFREE(1)
PURPOSE:   LOCATES FREE SPACE ON A DISC
           'N'=DISC DRIVE NUMBER (0-15)


      DIM
HOW:       DIM VAR(INDICES)[,VAR(INDICES),.....]
EG:        DIM A(1000),B(4,8,3)
           DIM N$(20,5)
PURPOSE:   SETS THE DIMENSIONS OF AN ARRAY OR STRING ARRAY
           MULTI-DIMENSIONAL ARRAYS ARE LIMITED TO 65535
           ELEMENTS. SINGLE DIMENSIONAL ARRAYS ARE LIMITED
           ONLY BY THE MEMORY AVAILABLE.
           SEE ALSO ERASE.


      DIM?
HOW:       DIM?(FIELD())
EG:        DIM A$(3,4,5)
           DIM N%(12,12)
           PRINT DIM?(A$())
           PRINT DIM?(N%())
PURPOSE:   DETERMINES THE NUMBER OF ELEMENTS IN AN ARRAY.
           NOTE THE ARRAYS HAVE AN ELEMENT '0', SO THE
           VALUES RETURNED IN THE ABOVE EXAMPLES WOULD BE
           120 AND 169

 
      DIR
HOW:       DIR [ "FILESPEC" [ TO "FILE" ]]
EG:        DIR "A:*.*" TO "A:CONTENTS"
           DIR "A:*.*" TO "LST:"
PURPOSE:   LISTS THE FILES ON A DISC
           'FILESPEC' IS A FILENAME WHICH NEEDS THE FOLLOWING
           SPECIFICATION :-
           THE DISC DRIVE IS SPECIFIED BY A LETTER PLACED IN FRONT 
           OF THE FILENAME AND FOLLOWED BY A COLON (eg. A: FOR 
           DISC DRIVE ). 
           IF ONE OR MORE QUESTION MARKS ARE IN A FILE NAME, ALL
           FILES WHICH CORRESPOND WITH THE FILENAME, APART FROM 
           THE QUESTION MARKS WILL BE ADDRESSED. eg.
           DIR "ART??.DOC"
           THIS COMMAND WOULD SEARCH FOR ALL FILES WHICH ARE FIVE
           LETTERS LONG, BEGIN WITH 'ART' AND HAVE THE EXTENSION
           DOC.
           THE CHARACTER '*' MEANS THAT A WHOLE PART OF THE FILE  
           NAME IS TO BE DISREGARDED IN THE SEARCH eg.
           DIR "J*.BAS"
           THIS COMMAND WOULD SEARCH FOR ALL FILES WHICH HAVE THE
           EXTENSION 'BAS' AND BEGIN WITH 'J'
           BY USING THE OPTIONAL ADDITION 'TO "FILE"' THE LIST
           FOUND CAN BE SENT TO ANOTHER FILE OR PRINTED OUT
           ( "LST:" )


      DIR$
HOW:       DIR$(N)
EG:        MKDIR "/TEST"
           CHDIR "/TEST"
           PRINT DIR$(0)
PURPOSE:   NAMES THE ACTIVE DIRECTORY FOR THE DISC DRIVE WITH THE
           NUMBER 'N'
           'N' IS A NUMERIC EXPRESION WHICH REPRESENTS THE THE
           VALUE OF THE DISC DRIVE NUMBER (1=A:, 2=B:,...0=ACTUAL
           DISC DRIVE).


      DIV
HOW:       DIV VAR,N
EG:        DIV NUM,X
           PRINT NUM
PURPOSE:   DVIDES THE VALUE OF VAR BY N. SAME AS VAR=VAR/N
           BUT EXECUTES 30% FASTER.


      DO....LOOP
HOW:       DO
           LOOP
EG:        DO
             INC I
             PRINT I
           LOOP
PURPOSE:   CREATES AN ENDLESS LOOP. THE PART OF THE PROGRAM
           IN BETWEEN IS REPEATED ENDLESSLY. THE LOOP CAN ONLY
           BE LEFT BY EXIT  eg. EXIT IF I=234.


      DRAW
HOW:       DRAW [ TO ] X,Y
           DRAW X1,Y1, TO X2,Y2 TO X3,Y3.......
EG:        DRAW 50,50
           DRAW TO 40,25
           DRAW 200,10 TO 200,100
PURPOSE:   DRAWS POINTS AND CONNECTS TWO OR MORE POINTS WITH
           STRAIGHT LINES
           DRAW X,Y IS THE SAME AS PLOT X,Y
           DRAW TO X,Y CONNECTS THE POINT TO THE PREVIOUSLY
           DRAWN POINT (DRAWN BY PLOT, LINE OR DRAW).

           SEE ALSO DEFLINE


      EDIT
HOW:       EDIT
EG:        PRINT "BACK TO THE EDITOR WITHOUT "
           PRINT "A PROGRAM END BOX"
           EDIT
PURPOSE:   RETURNS TO THE EDITOR.
           WHEN USED IN DIRECT MODE THE COMMAND ALLOWS A RETURN
           TO THE EDITOR. 
           IN A PROGRAM IT IS THE SAME AS END BUT WITHOUT THE
           PROGRAM END ALERT BOX.


      ELLIPSE
HOW:       ELLIPSE X,Y,RX,RY [,phi0,phi1]
EG:        ELLIPSE 100,100,30,40
           ELIPSE  200,200,30,40,900,2700
PURPOSE:   DRAWS AN ELLIPSE AT X,Y. 'RX' IS THE LENGTH OF THE 
           HORIZONTAL AXIS AND 'RY' IS THE LENGTH OF THE VERTICAL 
           AXIS.
           THE OPTIONAL ANGLES 'phi0' & 'phi1' GIVE THE START AND
           FINISH (IN TENTHS OF A DEGREE) ANGLES SHOULD ONLY A
           SEGMENT BE REQUIRED.


      END
HOW:       END
EG:        DO
             INC I
             PRINT I
             EXIT IF I=10000
           LOOP
           END
PURPOSE:   CLOSES ALL FILES AND TERMINATES PROGRAM EXECUTION CAN 
           BE USED AT ANY POINT IN A PROGRAM. ITS USE AT THE END
           OF A PROGRAM IS OPTIONAL.


      EOF
HOW:       EOF ([ # ] N)
EG:        OPEN "O",#1,"DATA"
           PRINT #1,"BEST BEFORE 17/8/26"
           CLOSE #1
           OPEN "I",#1,"DATA"
           DO
             PRINT INP(#1),EOF(#1)
             EXIT IF EOF(#1)
           LOOP
           END
PURPOSE:   DETERMINES WHETHER THE FILE POINTER FOR THE FILE WITH
           CHANNEL NUMBER 'N' IS AT THE END OF THE FILE.
           'N' IS AN INTEGER BETWEEN 0 & 99 WHICH REFERS TO THE
           CHANNEL NUMBER OF A FILE OPENED WITH THE OPEN COMMAND.
           THE LINE:  EXIT IF EOF(#1)  ABOVE AVOIDS THE ERROR
           MESSAGE: "END OF FILE REACHED EOF".
           THIS FUNCTION CAN ONLY BE USED WITH DISC FILES.
           (NOT FOR CON: LST: etc.).


